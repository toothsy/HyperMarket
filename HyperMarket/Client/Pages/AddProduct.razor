@page "/AddProduct"
@using System.ComponentModel.DataAnnotations
@using HyperMarket.DB.Models
@inject HyperMarket.Data.Interfaces.IProductService productService
@inject NavigationManager UriHelper
@inject ICategoryService categoryService
@inject ISubCategoryService subcategoryService
@inject AuthenticationStateProvider AuthStateProvider
@inject ISnackbar Snackbar

<center>
    <EditForm Model="prod" OnValidSubmit="AddYourProduct">
        <DataAnnotationsValidator />
<div class ="bg">
       
        <MudGrid Class="d-flex justify-center align-center">
           
                <MudItem >
                    <MudCard >
                        <h4>Add New Product</h4>
                        <MudCardContent>
                            <MudTextField Label="Product name" HelperText="Max. 30 characters" @bind-Value="prod.ProductName" For="@(()=>prod.ProductName)" InputType="InputType.Text"/>
                            <MudTextField Label="Product Description" Class="mt-3" @bind-Value="proddescription" InputType="InputType.Text"/>
                            <MudTextField Label="Inclusions" Class="mt-3" @bind-Value="prodinclusion" InputType="InputType.Text"/>
                            <MudTextField Label="Conditions" Class="mt-3" @bind-Value="prodcondition" InputType="InputType.Text"/>
                            <MudTextField Label="Price" HelperText="List your price" Class="mt-3" @bind-Value="prod.Price" For="@(()=> prod.Price)" InputType="InputType.Number" />
                           <MudSelect @bind-Value="@prod.CategoryId" Label="Category"  AnchorOrigin="Origin.BottomCenter">
                                @foreach (var item in category)
                                {
                                    <MudSelectItem Value=@item.CategoryId >
                                        @item.CategoryName
                                        </MudSelectItem>
                                }
                            </MudSelect>
                            <MudSelect @bind-Value="@prod.SubCategoryId" Label="SubCategory"  AnchorOrigin="Origin.BottomCenter">
                                @foreach (var item in subcategory)
                                {
                                    <MudSelectItem Value=@item.SubCategoryId >
                                        @item.SubCategoryName
                                        </MudSelectItem>
                                }
                            </MudSelect>
                            <MudTextField Label="Discount" HelperText="List your discount percentage" Class="mt-3" @bind-Value="prod.Discount" For="@(()=>prod.Discount)" InputType="InputType.Number" />
                            <MudTextField Label="Address Line 1" Class="mt-3" @bind-Value="prod.AddressLine1" For="@(()=> prod.AddressLine1)" InputType="InputType.Text"/>
                            <MudTextField Label="Address Line 2" Class="mt-3" @bind-Value="prod.AddressLine2" For="@(()=> prod.AddressLine2)" InputType="InputType.Text"/>
                            <MudTextField Label="Address Line 3" Class="mt-3" @bind-Value="prod.AddressLine3" For="@(()=> prod.AddressLine3)" InputType="InputType.Text"/>
                            <MudTextField Label="Pin" Class="mt-3" @bind-Value="prod.Pin" For="@(()=> prod.Pin)" InputType="InputType.Number" />
                        </MudCardContent>
                        <label class="label-for-upload" for="fileInput2"> 
                            Upload Image <MudIcon Icon="@Icons.Filled.CloudUpload"/>
                        </label>
                        <InputFile id="fileInput2" OnChange="OnInputFileChanged" hidden multiple />
                        <MudCardActions>
                            <div class="btn">
                                <MudButton ButtonType="ButtonType.Submit" Align="align.Right">Register</MudButton>
                            </div>
                        </MudCardActions>

                    </MudCard>
                </MudItem>
         

        </MudGrid>
           </div>
    </EditForm>
 
</center>

@code {
    AddProductModel prod = new AddProductModel();
    List<Category> category = new List<Category>();
    List<SubCategory> subcategory = new List<SubCategory>();
    public string productImage = string.Empty;
    public string proddescription = string.Empty;
    public string prodinclusion = string.Empty;
    public string prodcondition = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        category = await categoryService.GetAllCategory();
        subcategory = await subcategoryService.GetAllSubCategory();
    }
    async void AddYourProduct()
    {
        AuthenticationState ac = await AuthStateProvider.GetAuthenticationStateAsync();
        prod.userId = Int32.Parse(ac.User.Claims.First(i => i.Type == System.Security.Claims.ClaimTypes.NameIdentifier).Value);
        prod.CategoryId = prod.CategoryId;
        prod.SubCategoryId = prod.SubCategoryId;
        prod.ImageUrl = productImage;
        prod.ProductDescription = proddescription + "&b" + prodinclusion + "&b" + prodcondition;
        productService.SaveProduct(prod);
        Snackbar.Add("Product Added Sucessfully", Severity.Success);
        UriHelper.NavigateTo("/Myproduct");
    }

    public async Task OnInputFileChanged(InputFileChangeEventArgs inputFileChangeEvent)
    {

        var file = inputFileChangeEvent.File;


        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);


        productImage= $"data:image/jpg;base64,{Convert.ToBase64String(buffer)}";
        Snackbar.Add("Image Uploaded", Severity.Success);
    }
    

}