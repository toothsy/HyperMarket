@page "/ListBusiness"
@using HyperMarket.Shared
@using HyperMarket.DB.Models;
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@inject HyperMarket.Data.Interfaces.IBusinessDetailService businessService
@*@attribute [Authorize(Roles="User")]
*@
@inject NavigationManager UriHelper

<h3>List your business</h3>

@*<AuthorizeView Roles="User">
    <Authorized>
        <h1>Hi user</h1>

    </Authorized>
    <NotAuthorized>
        You do not have access to view this page
    </NotAuthorized>
</AuthorizeView>

*@
<div>
    <EditForm Model="listBusiness" OnValidSubmit="ListYourBusiness">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <MudGrid Class = "d-flex align-center justify-center mud-width-full py-8">
            <MudItem xs="12" sm="7">
                <MudCard>
                    <MudCardContent>
                        <h3>List your Business</h3>
                        <MudTextField Label="Email Id" @bind-Value="listBusiness.Email" For="@(()=> listBusiness.Email)" InputType="InputType.Email"></MudTextField>
                        <MudTextField Label="Business Name" @bind-Value="listBusiness.Businessname" For="@(()=> listBusiness.Businessname)" InputType="InputType.Text"></MudTextField>
                        <MudTextField Label="Business Description" @bind-Value="listBusiness.BusinessDescription" For="@(()=> listBusiness.BusinessDescription)" InputType="InputType.Text"></MudTextField>
                        
                    </MudCardContent>
                    <MudCardActions>
                        <div class=btn>
                            <MudButton  xs="12" sm="6"  class="d-flex justify-space-between mt-6" ButtonType="ButtonType.Submit"
                            Variant="Variant.Filled" Color="Color.Error" Align = "right">Update</MudButton>
                        </div>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </EditForm>
</div>

@code {
    bool success;
    ListBusinessModel listBusiness = new ListBusinessModel();

    async void ListYourBusiness()
    {
        var x = 40;
        businessService.SaveBusiness(listBusiness);
        UriHelper.NavigateTo("/AddProduct");
        //var result = await AuthService.Signup(userSignup, userOTP);
        //if (result.Success)
        //{
        //    NavigationManager.NavigateTo("signin");
        //}
        //else
        //{
        //    Console.WriteLine(result.Message);
        //}
    }







    //MudTextField<string> pwField1;
    //MudTextField<string> pwusername;
    //MudForm form;
    //User user = new User();
    //BusinessDetail business = new BusinessDetail();
    //Location location = new Location();
        
    //public void postData()
    //{
    //    businessService.SaveBusiness(business);
    //}

    //private IEnumerable<string> UsernameCheck(string uname)
    //{
    //    if (uname.Length < 8)
    //        yield return "Username must be at least of length 8";
    //    if (!Regex.IsMatch(uname, @"[A-Z]"))
    //        yield return "Username must contain at least one uppercase letter";
    //    if (!Regex.IsMatch(uname, @"[0-9]"))
    //        yield return "Username must contain at least one digit";
    //}

    //private IEnumerable<string> PasswordStrength(string pw)
    //{
    //    if (string.IsNullOrWhiteSpace(pw))
    //    {
    //        yield return "Password is required!";
    //        yield break;
    //    }
    //    if (pw.Length < 8)
    //        yield return "Password must be at least of length 8";
    //    if (!Regex.IsMatch(pw, @"[A-Z]"))
    //        yield return "Password must contain at least one capital letter";
    //    if (!Regex.IsMatch(pw, @"[a-z]"))
    //        yield return "Password must contain at least one lowercase letter";
    //    if (!Regex.IsMatch(pw, @"[0-9]"))
    //        yield return "Password must contain at least one digit";
    //}
    //private string PasswordMatch(string arg)
    //{
    //    if (pwField1.Value != arg)
    //        return "Passwords don't match";
    //    return null;
    //}
    //public void OnValidSubmit(EditContext context)
    //{
    //    success = true;
    //    StateHasChanged();
    //}

}
