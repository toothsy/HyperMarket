@page "/ListBusiness"
@using HyperMarket.Shared
@using HyperMarket.DB.Models;
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using HyperMarket.UIControls.LoadingIcon
@inject HyperMarket.Data.Interfaces.IBusinessDetailService businessService
@inject HyperMarket.Data.Interfaces.IUserRole userRoleServices
@inject AuthenticationStateProvider AuthStateProvider


@attribute [Authorize(Roles="User")]

@inject NavigationManager UriHelper


@*<AuthorizeView Roles="User">
    <Authorized>
        <h1>Hi user</h1>

    </Authorized>
    <NotAuthorized>
        You do not have access to view this page
    </NotAuthorized>
</AuthorizeView>
*@
<div class = "bg">
    <EditForm Model="listBusiness" OnValidSubmit="ListYourBusiness">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <MudGrid Class = "d-flex align-center justify-center mud-width-full py-8">
            <MudItem xs="12" sm="7">
                <MudCard Class="card-beautified">
                    <MudCardContent>
                        <h3>List your Business</h3>
                        <MudTextField Label="Email Id" @bind-Value="listBusiness.Email" For="@(()=> listBusiness.Email)" InputType="InputType.Email"></MudTextField>
                        <MudTextField Label="Business Name" @bind-Value="listBusiness.Businessname" For="@(()=> listBusiness.Businessname)" InputType="InputType.Text"></MudTextField>
                        <MudTextField Label="Business Description" @bind-Value="listBusiness.BusinessDescription" For="@(()=> listBusiness.BusinessDescription)" InputType="InputType.Text"></MudTextField>
                        <MudSelect T="int" Label="Location"  @bind-Value="listBusiness.locationID" For="@(()=> listBusiness.locationID)" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var item in AllLocations)
                            {
                                <MudSelectItem Value=@item.LocationId>@item.LocationName</MudSelectItem>
                            }
                        </MudSelect>
                        @*<InputFile id="fileinput" OnChange ="@OnInputFileChanged" hidden multiple/>
                        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.CloudUpload" for="fileInput"> Upload Files
                        </MudButton>*@
                        <label class="label-for-button" for="fileInput2"> Upload Image <MudIcon Icon="@Icons.Filled.CloudUpload"/></label>
                        <InputFile id="fileInput2" OnChange="OnInputFileChanged" hidden multiple />
                    </MudCardContent>
                    <MudCardActions>
                        <div class=btn>
                            <MudButton  xs="12" sm="6"  class="d-flex justify-space-between mt-6" ButtonType="ButtonType.Submit"
                            Variant="Variant.Filled" Color="Color.Error" Align = "right">Register</MudButton>
                        </div>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </EditForm>
</div>

@code {
    bool success;
    ListBusinessModel listBusiness = new ListBusinessModel();
    public List<Location> AllLocations = new List<Location>();
    public Location loc = new Location();
    public string businessImage { get; set; } = string.Empty;
    public UserRole userRole = new UserRole();


    public async Task OnInputFileChanged(InputFileChangeEventArgs inputFileChangeEvent)
    {
        //getting the file
        var file = inputFileChangeEvent.File;

        //byte array
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        //byte array to base 64 string
        businessImage= $"data:image/jpg;base64,{Convert.ToBase64String(buffer)}";
    }

    protected override async Task OnInitializedAsync()
    {
        AllLocations = await locationService.GetAllLocation();
    }

    async void ListYourBusiness()
    {
        AuthenticationState ac = await AuthStateProvider.GetAuthenticationStateAsync();
        listBusiness.UserId = Int32.Parse(ac.User.Claims.First(i => i.Type == System.Security.Claims.ClaimTypes.NameIdentifier).Value);
        listBusiness.imageurl = businessImage;
        businessService.SaveBusiness(listBusiness);
        UriHelper.NavigateTo("/AddProduct");
    }
}
