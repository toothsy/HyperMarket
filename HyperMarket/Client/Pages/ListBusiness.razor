@page "/ListBusiness"
@using HyperMarket.Shared
@using HyperMarket.DB.Models;
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using HyperMarket.UIControls.LoadingIcon

@inject HyperMarket.Data.Interfaces.IBusinessDetailService businessService
@inject HyperMarket.Data.Interfaces.IUserRole userRoleServices

@*@attribute [Authorize(Roles="User")]*@

@inject NavigationManager UriHelper

<h3>List your business</h3>

@*<AuthorizeView Roles="User">
    <Authorized>
        <h1>Hi user</h1>

    </Authorized>
    <NotAuthorized>
        You do not have access to view this page
    </NotAuthorized>
</AuthorizeView>
*@
<div class = "bg">
    <EditForm Model="listBusiness" OnValidSubmit="ListYourBusiness">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <MudGrid Class = "d-flex align-center justify-center mud-width-full py-8">
            <MudItem xs="12" sm="7">
                <MudCard>
                    <MudCardContent>
                        <h3>List your Business</h3>
                        <MudTextField Label="Email Id" @bind-Value="listBusiness.Email" For="@(()=> listBusiness.Email)" InputType="InputType.Email"></MudTextField>
                        <MudTextField Label="Business Name" @bind-Value="listBusiness.Businessname" For="@(()=> listBusiness.Businessname)" InputType="InputType.Text"></MudTextField>
                        <MudTextField Label="Business Description" @bind-Value="listBusiness.BusinessDescription" For="@(()=> listBusiness.BusinessDescription)" InputType="InputType.Text"></MudTextField>
                        <MudSelect T="string" Label="Location"  @bind-Value="listBusiness.location" For="@(()=> listBusiness.location)" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var item in AllLocations)
                            {
                                <MudSelectItem Value=@item/>
                            }
                        </MudSelect>

                        @*<MudTextField Label="image link" @bind-Value="listBusiness.imageurl" For="@(()=> listBusiness.imageurl)" InputType="InputType.Text"></MudTextField>*@
                        <MudItem>

                        <InputFile OnChange = "@OnInputFileChanged" />
                        </MudItem>
                        @*<MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Filled.CloudUpload" for="fileInput">Upload Files</MudButton>
                        *@
                    </MudCardContent>
                    <MudCardActions>
                        <div class=btn>
                            <MudButton  xs="12" sm="6"  class="d-flex justify-space-between mt-6" ButtonType="ButtonType.Submit"
                            Variant="Variant.Filled" Color="Color.Error" Align = "right">Register</MudButton>
                        </div>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </EditForm>
</div>

@code {
    bool success;
    ListBusinessModel listBusiness = new ListBusinessModel();
    public List<String> AllLocations = new List<String>();
    public Location loc = new Location();
    public string businessImage{ get; set; }
    public UserRole userRole = new UserRole();

    public async Task OnInputFileChanged(InputFileChangeEventArgs inputFileChangeEvent)
    {
        //getting the file
        var file = inputFileChangeEvent.File;

        //byte array
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        //byte array to base 64 string
        listBusiness.imageurl = $"data:image/jpg;base64,{Convert.ToBase64String(buffer)}";

    }

    protected override async Task OnInitializedAsync()
    {

        AllLocations = await locationService.GetAllLocation();

    }

    async void ListYourBusiness()
    {
        businessService.SaveBusiness(listBusiness);
        //if(userRole.RoleId != 1)
        //{
        //    userRole.RoleId = userRole.RoleId + 1;
        //}
        //await userRoleServices.UserRoleUpdate(userRole);
        UriHelper.NavigateTo("/AddProduct");
        
    }

    





    //MudTextField<string> pwField1;
    //MudTextField<string> pwusername;
    //MudForm form;
    //User user = new User();
    //BusinessDetail business = new BusinessDetail();
    //Location location = new Location();
        
    //public void postData()
    //{
    //    businessService.SaveBusiness(business);
    //}

    //private IEnumerable<string> UsernameCheck(string uname)
    //{
    //    if (uname.Length < 8)
    //        yield return "Username must be at least of length 8";
    //    if (!Regex.IsMatch(uname, @"[A-Z]"))
    //        yield return "Username must contain at least one uppercase letter";
    //    if (!Regex.IsMatch(uname, @"[0-9]"))
    //        yield return "Username must contain at least one digit";
    //}

    //private IEnumerable<string> PasswordStrength(string pw)
    //{
    //    if (string.IsNullOrWhiteSpace(pw))
    //    {
    //        yield return "Password is required!";
    //        yield break;
    //    }
    //    if (pw.Length < 8)
    //        yield return "Password must be at least of length 8";
    //    if (!Regex.IsMatch(pw, @"[A-Z]"))
    //        yield return "Password must contain at least one capital letter";
    //    if (!Regex.IsMatch(pw, @"[a-z]"))
    //        yield return "Password must contain at least one lowercase letter";
    //    if (!Regex.IsMatch(pw, @"[0-9]"))
    //        yield return "Password must contain at least one digit";
    //}
    //private string PasswordMatch(string arg)
    //{
    //    if (pwField1.Value != arg)
    //        return "Passwords don't match";
    //    return null;
    //}
    //public void OnValidSubmit(EditContext context)
    //{
    //    success = true;
    //    StateHasChanged();
    //}

}
