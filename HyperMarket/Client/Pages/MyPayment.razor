@page "/MyPayment"
@inject NavigationManager UriHelper
@using HyperMarket.Shared
@using HyperMarket.DB.Models
@using HyperMarket.UIControls.LoadingIcon
@inject HyperMarket.Data.Interfaces.IPaymentService paymentService
@inject HyperMarket.Data.Interfaces.ICustomerDetailService customerdetailService
@inject HyperMarket.Data.Interfaces.IOrderService orderService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject HyperMarket.Data.Interfaces.IBusinessDetailService businessdetailService
@inject AuthenticationStateProvider AuthStateProvider
@using HyperMarket.ViewModels;

@if (prod == null) {
        <Loading/>
    }
else{
<div class="bg">
   <center>
       <EditForm Model="paymentModel" OnValidSubmit=@OnValidSubmit> 
      <div class="first">
         <MudGrid Class="d-flex justify-center align-center">
            <div class="second">
               <MudItem xs="12" sm="7">
                    <div class="third">
                        <MudCard class="fourth">
                             <MudCardContent>
                                 <h2 class="log">Payment</h2>
                                    <div class="radiotype">
                                        <MudRadioGroup @bind-SelectedOption="@Placement" @bind-Value="paymentModel.PaymentType">
                                            <MudRadio Color="Color.Primary" Option="@(Placement.Top)">Credit Card</MudRadio> <br />
                                            <MudRadio Color="Color.Primary" Option="@(Placement.Bottom)">Debit Card</MudRadio><br />
                                            <div class="radio3">
                                                <MudRadio Color="Color.Primary" Option="@(Placement.Left)">Paytm</MudRadio><br />
                                            </div>
                                            <div class="radio4">
                                                <MudRadio class="radio4" Color="Color.Primary" Option="@(Placement.Right)">Net Banking</MudRadio>
                                            </div><br /><br /><br />
                                        </MudRadioGroup>
                                        <h6>Total Amount :</h6>
                                        <div class="text1">
                                            <MudTextField @bind-Value="prod.Price" Label="" ReadOnly="true" Variant="Variant.Filled" Margin="Margin.Dense"></MudTextField>
                                            </div>
                                        <h6>My Credits :</h6>
                                        <div class="text1">
                                            <MudTextField @bind-Value="customer.MyCredits" Label="" ReadOnly="true" Variant="Variant.Filled" Margin="Margin.Dense"></MudTextField>
                                        </div>
                                    </div>
                                </MudCardContent>
                                @*<div class="checkbox1">
                                    <MudCheckBox T="bool" Required="false" Class="ml-n2" Label="Use Credits" CheckedChanged =@OnUsingCredits/>
                                </div>*@
                                <MudCardActions>
                                    <div class="btn">
                                        <MudButton ButtonType="ButtonType.Submit" Align="align.Center" > <div class="btncolor">Pay Now</div></MudButton>
                                    </div>
                                </MudCardActions>
                            </MudCard>
                        </div>
                    </MudItem>
                </div>
            </MudGrid>
        </div>
        </EditForm>
    </center>
</div>
}

@code {
    public Placement Placement { get; set; } = Placement.Right;
    public bool Basic_CheckBox2 { get; set; } = false;

    public int userId = 0;
    public CustomerDetail customer = new CustomerDetail();
    public BusinessDetail business = new BusinessDetail();
    public Product prod;
    public int finalPrice;
    public Payment paymentDetails = new Payment();

    UpdateProfile pay = new UpdateProfile();
    public User user;
    public OrderModel order = new OrderModel();
    public PaymentModel paymentModel = new PaymentModel();

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState ac = await AuthStateProvider.GetAuthenticationStateAsync();
        userId = Int32.Parse(ac.User.Claims.First(i => i.Type == System.Security.Claims.ClaimTypes.NameIdentifier).Value);
        customer = await customerdetailService.GetCustomerDetailById(userId);
        business = await sessionStorage.GetItemAsync<BusinessDetail>("business");
        prod = await sessionStorage.GetItemAsync<Product>("product");
        paymentModel.PaymentType = "Net Banking";
        paymentModel.CreditsUsed = 0;
        finalPrice = prod.Price;
    }

    private async Task OnValidSubmit(EditContext context)
    {
        paymentModel.CreditsUsed = customer.MyCredits;
        paymentModel.Price = finalPrice;
        customer.MyCredits = customer.MyCredits + prod.Price;

        paymentService.SavePaymentDetails(paymentModel);
        await customerdetailService.UpdateUser(customer);
        paymentDetails = await paymentService.GetCurrentPayment();
        order.BusinessId = business.BusinessId;
        order.UserId = userId;
        order.ProductId = prod.ProductId;
        order.MyOrderCredits = prod.Price;
        order.PaymentId = paymentDetails.PaymentId;
        orderService.CreateOrder(order);
        UriHelper.NavigateTo("/PaymentSuccessful");
    }

    public void OnUsingCredits()
    {
         if (prod.Price <= (customer.MyCredits / 10))
        {
            finalPrice = 0;
            customer.MyCredits = customer.MyCredits - prod.Price * 10;
        }
        else
        {
            finalPrice = prod.Price - customer.MyCredits/10;
            customer.MyCredits = 0;
        }
        paymentModel.CreditsUsed = customer.MyCredits;
    }
  }