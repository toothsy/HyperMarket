@page "/MyPayment"
@inject NavigationManager UriHelper
@using HyperMarket.Shared
@using HyperMarket.DB.Models
@inject HyperMarket.Data.Interfaces.IPaymentService paymentService
@inject HyperMarket.Data.Interfaces.ICustomerDetailService customerdetailService
@* @inject HyperMarket.Data.Interfaces.IOrderService orderService*@
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@using HyperMarket.ViewModels;

@if (prod == null) {
        <Spinner/>
    }
else{
<div class="bg">
   <center>
       <EditForm Model="pay" OnValidSubmit=@OnValidSubmit> 
      <div class="first">
         <MudGrid Class="d-flex justify-center align-center">
            <div class="second">
               <MudItem xs="12" sm="7">
                    <div class="third">
                        <MudCard class="fourth">
                             <MudCardContent>
                                 <h2 class="log">Payment</h2>
                                    <div class="radiotype">
                                        <MudRadioGroup @bind-SelectedOption="@Placement">
                                            <MudRadio Color="Color.Primary" Option="@(Placement.Top)">Credit Card</MudRadio> <br />
                                            <MudRadio Color="Color.Primary" Option="@(Placement.Bottom)">Debit Card</MudRadio><br />
                                            <div class="radio3">
                                                <MudRadio Color="Color.Primary" Option="@(Placement.Left)">Paytm</MudRadio><br />
                                            </div>
                                            <div class="radio4">
                                                <MudRadio class="radio4" Color="Color.Primary" Option="@(Placement.Right)">Net Banking</MudRadio>
                                            </div><br /><br /><br />
                                        </MudRadioGroup>
                                        <h6>Total Amount :</h6>
                                        <div class="text1">
                                            <MudTextField @bind-Value="prod.Price" Label="" ReadOnly="true" Variant="Variant.Filled" Margin="Margin.Dense"></MudTextField>
                                            </div>
                                        <h6>My Credits :</h6>
                                        <div class="text1">
                                            <MudTextField @bind-Value="c1.MyCredits" Label="" ReadOnly="true" Variant="Variant.Filled" Margin="Margin.Dense"></MudTextField>
                                        </div>
                                        @*<h6>Total credits:</h6><MudTextField class = "text1" @bind-Value="cus.MyCredits" Label="" ReadOnly="true" Variant="Variant.Filled" Margin="Margin.Dense"></MudTextField>
                                        *@
                                    </div>
                                </MudCardContent>
                                <div class="checkbox1">
                                    <MudCheckBox T="bool" Required="false" Class="ml-n2" Label="Use Credits" />
                                </div>
                                <MudCardActions>
                                    <div class="btn">
                                        <MudButton ButtonType="ButtonType.Submit" Align="align.Center" > <div class="btncolor">Pay Now</div></MudButton>
                                    </div>
                                </MudCardActions>
                            </MudCard>
                        </div>
                    </MudItem>
                </div>
            </MudGrid>
        </div>
        </EditForm>
    </center>
</div>
}

@code {
    public Placement Placement { get; set; } = Placement.Right;
    public bool Basic_CheckBox2 { get; set; } = false;

    public string TextValue { get; set; }

    public Payment payment1 = new Payment();
    public Product prod;
    public CustomerDetail c1 = new CustomerDetail();
    UpdateProfile pay = new UpdateProfile();
    public User user;

    protected override async Task OnInitializedAsync()
    {
        //payment1 = await paymentService.GetPaymentById(801);
        c1 = await customerdetailService.GetCustomerDetailById(501);
        prod = await sessionStorage.GetItemAsync<Product>("product");
    }
   

     private async Task OnValidSubmit(EditContext context)
    {
        int s = prod.Price;
        int cashbackPercentage = 10;
        if(s > c1.MyCredits)
        {
            c1.MyCredits = c1.MyCredits + (s/cashbackPercentage);
        }
        else
        {
            c1.MyCredits = c1.MyCredits - s;
        }
        await customerdetailService.UpdateUser(c1);
        //<a href="/PaymentSuccessful"></a>
        UriHelper.NavigateTo("/PaymentSuccessful");
    }
  }