@page "/Myproduct"
@inject ISnackbar Snackbar
@using System.ComponentModel.DataAnnotations
@using HyperMarket.DB.Models
@inject HyperMarket.Data.Interfaces.IProductService productService
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthStateProvider
@inject ISnackbar Snackbar

<div class="backgroundcolor_height">
    <MudGrid Class="d-flex align-center justify-center mud-width-full py-8">
        <MudSimpleTable Style="overflow-x: auto;padding: 20px;">
            <div class = "table_length">
            <thead>
                <tr>
                    @foreach (var h in headings)
                    {
                        <th>@h</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var item in products){
                    @if (item.UserId == userId){
                        <tr>
                           <td contenteditable='true'>@item.ProductId</td>
                           <td contenteditable='true'>@item.ProductName</td>
                           <td contenteditable='true'>@item.CategoryId</td>
                           <td contenteditable='true'>@item.Price</td>
                           <td contenteditable='true'>@item.Discount</td>
                           <td contenteditable='true'><div class="btn"><MudButton ButtonType="ButtonType.Submit" OnClick="@(e => RemoveProduct(item.ProductId))" Align="align.Center"><a href="/MyProduct"><div class="delete_buttonColor">Delete</div></a></MudButton></div></td>
                          </tr>
                     }
                 }
            </tbody>
            <div class="add_button">
                        <MudButton ButtonType="ButtonType.Submit" Align="align.Center"><a href="/AddProduct"><div class="add_buttoncolor">Add Product</div></a></MudButton>
            </div>
            </div>
        </MudSimpleTable>
    </MudGrid>
</div>



@code {
    string[] headings = { "Product ID", "Product Name", "Category", "Price", "Discount","Delete" };
    public Product P1 = new Product();

    public List<Product> products = new List<Product>();
    public int userId = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState ac = await AuthStateProvider.GetAuthenticationStateAsync();
            userId = Int32.Parse(ac.User.Claims.First(i => i.Type == System.Security.Claims.ClaimTypes.NameIdentifier).Value);
            //P1 = await productService.GetProductById(101);

            products = await productService.GetProducts();
        }
        catch
        {
             Snackbar.Add("No Products", Severity.Info);
        }
    }

    public async Task RemoveProduct(int id)
    {
        await productService.DeleteProduct(id);
        NavigationManager.NavigateTo("MyProduct", true);
        Snackbar.Add("Deleted Sucessfully", Severity.Success);
        
    }

}