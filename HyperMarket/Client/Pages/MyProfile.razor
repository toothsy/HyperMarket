@page "/MyProfile"
@using HyperMarket.DB.Models
@using HyperMarket.Shared
@using System.ComponentModel.DataAnnotations
@using HyperMarket.ViewModels;
@using HyperMarket.UIControls.LoadingIcon
@inject ISnackbar Snackbar

@inject HyperMarket.DB.Interfaces.IUserService userService
@inject HyperMarket.Data.Interfaces.ICustomerDetailService customerDetailService
@inject AuthenticationStateProvider AuthStateProvider

@attribute [Authorize(Roles="User")]

<PageTitle>My Profile</PageTitle>

@if (users1 == null)
{
    <Loading />
}
else
{
    <div class="backgroundcolor_height">
        <EditForm Model="profileup" OnValidSubmit="OnValidSubmit">
            <MudGrid Class="d-flex justify-center align-center;">
                <MudItem xs="12" sm="7">
                    <MudCard Style = "padding-bottom: 40px;">
                        <h2 class="MyProfile_heading">My Profile</h2>
                        <MudCardContent>
                            <h6 class="content_alignment_top">Username</h6>  <MudTextField @bind-Value="users1.UserName" Label="" ReadOnly="true" Variant="Variant.Filled" Margin="Margin.Dense">@users1.UserName</MudTextField>
                            <h6 class="content_alignment_top">First Name</h6>  <MudTextField @bind-Value="c1.FirstName" Label="" Variant="Variant.Filled" Margin="Margin.Dense"></MudTextField>
                            <h6 class="content_alignment_top">Last Name</h6>  <MudTextField @bind-Value="c1.LastName" Label="" Variant="Variant.Filled" Margin="Margin.Dense"></MudTextField>
                            <h6 class="content_alignment_top">Mail Id</h6>   <MudTextField @bind-Value="users1.EmailId" Label="" ReadOnly="true" Variant="Variant.Filled" Margin="Margin.Dense"></MudTextField>
                            <h6 class="content_alignment_top">Referral Code</h6>  <MudTextField @bind-Value="c1.ReferralCode" Label="" ReadOnly="true" Variant="Variant.Filled" />
                            <h6 class="content_alignment_top">Credits</h6>  <MudTextField @bind-Value="c1.MyCredits" Label="" ReadOnly="true" Variant="Variant.Filled" Margin="Margin.Dense"></MudTextField>
                        </MudCardContent>
                        <MudCardActions>
                            <div class="btn">
                                <MudButton ButtonType="ButtonType.Submit" Align="align.Center"><div class="btncolor">Update</div></MudButton>
                            </div>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
    </div>
}

@code {
    //public string searchString = "";
    //public List<User> users = new List<User>();
    //public CustomerDetail customer1 = new CustomerDetail();

    public int userId;
    public User users1;
    public CustomerDetail c1 = new CustomerDetail();

    UpdateProfile profileup = new UpdateProfile();

    protected override async Task OnInitializedAsync()
    {
        
        try
        {
            AuthenticationState ac = await AuthStateProvider.GetAuthenticationStateAsync();
            userId = Int32.Parse(ac.User.Claims.First(i => i.Type == System.Security.Claims.ClaimTypes.NameIdentifier).Value);
            users1 = await userService.GetUserById(userId);
            c1 = await customerDetailService.GetCustomerDetailById(userId);
        }
        catch
        {
             Snackbar.Add("User is not a Customer", Severity.Info);
        }
    }


    private async Task OnValidSubmit(EditContext context)
    {
        await customerDetailService.UpdateUser(c1);
        Snackbar.Add("Updated Sucessfully", Severity.Success);
    }

  }