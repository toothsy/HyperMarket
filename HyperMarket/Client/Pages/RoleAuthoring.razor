@page "/RoleAuthoring"
@inject HyperMarket.Data.Interfaces.IUserRole userroleservice
@using HyperMarket.DB.Interfaces
@using HyperMarket.UIControls.LoadingIcon;
@inject IUserService userservice
@inject NavigationManager NavigationManager;
@inject ISnackbar Snackbar
@if(userrole==null){
    <Loading/>
}

else{
    <center><h3>Role Authoring</h3></center>
    <MudGrid Class="justify-center d-flex align-center mud-width-full py-8">
        <MudTable Items=@userrole HorizontalScrollbar="false" 
            Bordered="true" Hover="true" Dense="true" Striped="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Role Table</MudText>
                    <MudSpacer />
                <MudTextField @bind-Value="searchstring" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>User Role Id</MudTh>
                <MudTh>User Id</MudTh>
                <MudTh>Role</MudTh>
                <MudTh>Role Name</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.UserRoleId</MudTd>
                    <MudTd>@context.UserId</MudTd>
                    <MudTd>@context.RoleId</MudTd>
                    <MudTd>@getRole(context.RoleId)</MudTd>
                    <MudTd><MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                aria-label="delete" OnClick="@(e => DeleteRole(context))">Delete</MudIconButton></MudTd>
                </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudGrid>
}
@code {
    public List<UserRole> userrole ;
    public string searchstring = "";
    public UserRole obj = new UserRole();
    //private UserRole selectedItem1 = null;
    //private HashSet<UserRole> selectedItems = new HashSet<UserRole>();


    protected override async Task OnInitializedAsync(){

        userrole = await userroleservice.GetAllUser();


    }
    public async Task DeleteRole(UserRole user)
    {

        int id = user.UserRoleId;
        //if(user.RoleId==1)
        //{
        //    await userservice.DeleteUser(id);
        //}
        await userroleservice.DeleteUserRole(id);
        NavigationManager.NavigateTo("RoleAuthoring", true);
        Snackbar.Add("Deleted Sucessfully", Severity.Success);
    }

    public string getRole(int i)
    {
        if (i == 1)
            return "User";
        else if (i == 2)
            return "Customer";
        else if (i == 3)
            return "Admin";
        else
            return "Business";
    }
    //private IEnumerable<UserRole> Elements = new List<UserRole>();
    //private bool FilterFunc1(User element) => FilterFunc(element, searchstring);

    //private bool FilterFunc(UserRole element, string searchString)
    //{
    //    if (string.IsNullOrWhiteSpace(searchString))
    //        return true;
    //    if (element.UserId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
    //        return true;
    //    if (element..Contains(searchString, StringComparison.OrdinalIgnoreCase))
    //        return true;
    //    if ($"{element.Number} {element.Position} {element.Molar}".Contains(searchString))
    //        return true;
    //    return false;
    //}

    //protected override Task OnInitializedAsync()
    //{
    //    userrole = await userservice.GetUserRoles();
    //}
}