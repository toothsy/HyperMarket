@page "/SignIn"
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject ISnackbar Snackbar

@inject AuthenticationStateProvider AuthStateProvider
    <center class="main-height">
        <EditForm Model="userSignin" OnValidSubmit="HandleGetOTP"  >
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <MudGrid Class="d-flex justify-center align-center">
                <MudItem xs="12" sm="7">
                    <MudCard class="card-beautified">
                        <MudCardContent>
                            <h3>Sign In</h3>

                            Please Sign In below or <a href="signup">Sign Up</a> for a new account.

                            <MudTextField Label="Email Id" @bind-Value="userSignin.Email" 
                                ReadOnly=@(!(@hideForm))
                                For="@(()=> userSignin.Email)" InputType="InputType.Email" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" 
                                Color="Color.Error" Class="ml-auto">@(@hideForm?"Get Otp":"Edit email") </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>

        <EditForm Model="userOTP" OnValidSubmit="HandleSignin" hidden="@(hideForm)">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <MudGrid Class="d-flex justify-center align-center">
                <MudItem xs="12" sm="7">
                    <MudCard class="card-beautified">
                        <MudCardContent>
                            <MudTextField Label="OTP" @bind-Value="userOTP.OTP" InputType="InputType.Number"
                            For="@(()=>userOTP.OTP)" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" 
                            Color="Color.Error" Class="ml-auto">Sign In</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
    </center>


@code {
    UserSignin userSignin = new UserSignin();
    UserOTP userOTP = new UserOTP();
    private bool hideForm = true;
    private bool disabled = false;
    private string messageForButton = "Get OTP";
    async void HandleSignin()
    {
        var result = await AuthService.Signin(userSignin, userOTP);
        if (result.Success){
            await LocalStorage.SetItemAsync<string>("authToken", result.Data);
            await AuthStateProvider.GetAuthenticationStateAsync();
            
            AuthenticationState ac = await AuthStateProvider.GetAuthenticationStateAsync();
            int userId = Int32.Parse(ac.User.Claims.First(i => i.Type == System.Security.Claims.ClaimTypes.NameIdentifier).Value);
            await sessionStorage.SetItemAsync("userId", userId );

            if (NavigationManager.Uri.EndsWith("/signin"))
            {
                Snackbar.Add("Successful SignIn", Severity.Success);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                NavigationManager.NavigateTo(NavigationManager.Uri);
            }
        }
        else{
            Console.WriteLine(result.Message);
            Snackbar.Add("Invalid Information", Severity.Warning);
        }
    }

    async void HandleGetOTP()
    {
        hideForm = !hideForm;
        userSignin.OTPValidate = new OTPValidate() { UserOTP = string.Empty, EncryptedActualOTPTimestamp = string.Empty };
        var result = await AuthService.GetOTP(userSignin);
        if (result.Success)
        {
            await LocalStorage.SetItemAsync<string>("OTP", result.Data);
            Snackbar.Add("OTP Sent", Severity.Success);
        }
        else
        {
            Snackbar.Add("InValid Email", Severity.Warning);
        }
    }
}
