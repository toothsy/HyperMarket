@page "/SignUp"
@inject HyperMarket.Data.Interfaces.ICustomerDetailService cdSer
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject ISnackbar Snackbar

    <center class="main-height">

        <EditForm Model="userSignup" OnValidSubmit="HandleGetOTP" >
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <MudGrid Class="d-flex align-center justify-center mud-width-full py-15">
                <MudItem xs="12" sm="7">
                    <MudCard class="card-beautified">
                        <MudCardContent>
                            <h3>Sign Up</h3>

                            <MudTextField ReadOnly="@(!hideForm)" Label="Email Id" @bind-Value="userSignup.Email" For="@(()=> userSignup.Email)" InputType="InputType.Email" />
                            <MudTextField ReadOnly="@(!hideForm)"  Label="User Name" @bind-Value="userSignup.Username" For="@(()=> userSignup.Username)" />
                            <MudTextField ReadOnly="@(!hideForm)"  Label="First Name" @bind-Value="userSignup.FirstName" For="@(()=> userSignup.FirstName)" />
                            <MudTextField ReadOnly="@(!hideForm)"  Label="Last Name" @bind-Value="userSignup.LastName" For="@(()=> userSignup.LastName)" />
                            <MudTextField ReadOnly="@(!hideForm)" Label="Referral code" @bind-Value="userSignup.ReferralCode" For="@(()=> userSignup.ReferralCode)" />
                        </MudCardContent>

                        <MudCardActions>
                            
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                                Color="Color.Error" Class="ml-auto" >@(@hideForm?"Get Otp":"Edit information")</MudButton>
                        </MudCardActions>
                        </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
        <EditForm Model="userOTP" OnValidSubmit="HandleSignup" hidden="@(hideForm)">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <MudGrid Class="d-flex justify-center align-center">
                <MudItem xs="12" sm="7">
                    <MudCard class="card-beautified">
                        <MudCardContent>
                            <MudTextField Label="OTP" @bind-Value="userOTP.OTP" InputType="InputType.Number"
                            For="@(()=>userOTP.OTP)" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" 
                            Color="Color.Error" Class="ml-auto">Sign Up!</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>

    </center>

@code {
    UserSignup userSignup = new UserSignup();
    UserOTP userOTP = new UserOTP();
    private bool hideForm = true;

    async void HandleSignup()
    {
        var result = await AuthService.Signup(userSignup, userOTP);

        if (result.Success){
            Snackbar.Add("Successful SignUp", Severity.Success);
            NavigationManager.NavigateTo("/signin");


        }
        else
        {
            Snackbar.Add("User already Exist", Severity.Info);
        }
    }

    async void HandleGetOTP()
    {
        hideForm = !hideForm;
        var result = await AuthService.GetOTP(new UserSignin
            {
                Email = userSignup.Email,
                OTPValidate = new OTPValidate()
                {
                    UserOTP = string.Empty,
                    EncryptedActualOTPTimestamp = string.Empty
                }
            });
        if (result.Success)
        {
            Snackbar.Add("Referral Code successfully updated credits", Severity.Success);
            await LocalStorage.SetItemAsync<string>("OTP", result.Data);
            Snackbar.Add("OTP Sent", Severity.Success);
        }
        else
        {
            Snackbar.Add("InValid OTP", Severity.Warning);
        }
    }
    }
