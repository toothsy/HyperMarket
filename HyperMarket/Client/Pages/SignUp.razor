@page "/SignUp"
@using HyperMarket.DB.Models;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject HyperMarket.DB.Interfaces.IUserService userService


<div class="bg">
    <MudGrid Class="ml-60 align-center">
        <div class="first">
            <MudItem class="second">
                <MudPaper Class="mx-auto pa-6">
                    <MudForm @ref="form" @bind-IsValid="@success" @onsubmit="postData">
                        <h4 class="position">Sign Up</h4>
                        <MudTextField T="string" @bind-Value="user.UserName" Label="Username" HelperText="Username must be between 8-16 characters long" Required="true" RequiredError="User name is required!"
                                      Validation=@(new Func<string, IEnumerable<string>>(UsernameCheck))></MudTextField>
                        <MudTextField T="string" Label="First Name" HelperText="Enter your First Name" Required="true"></MudTextField>
                        <MudTextField T="string" Label="Last Name" HelperText="Enter your Last Name" Required="true"></MudTextField>
                        <MudTextField T="string" @bind-Value="user.EmailId" Label="Email" Required="true" RequiredError="Email is required!"
                                      Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                        <MudTextField T="string" Label="Password" HelperText="The password must be atleast 8 characters long and must have at least one number." @ref="pwField1"
                                      InputType="InputType.Password"
                                      Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                      RequiredError="Password is required!" />
                        <MudTextField T="string" @bind-Value="user.Password"
                                      Label="Re-enter Password" HelperText="Repeat the password" InputType="InputType.Password"
                                      Validation="@(new Func<string, string>(PasswordMatch))" />
                        <MudTextField T="string" Label="Referal Link" HelperText="You can leave it empty if you do not have one" Required="false"></MudTextField>
                        <MudTextField T="string" @bind-Value="user.ReferredBy"
                                      Label="Who reffered you?" HelperText="reffered By ?" InputType="InputType.Text"
                                      Required="true" />
                        @*<MudTextField T="string" Label="Enter OTP" HelperText="Enter Correct OTP" Required="true"></MudTextField>*@
                        @*<MudButton style = "margin-left: 390px;width: 102px; color: white; height: 33px; background-color: #f35555;margin-top: 0px"  ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Align = "align.Center">Send OTP</MudButton>*@
                        <div class="btn">
                            @*<MudCheckBox T="bool" Required="false" Class="ml-n2" Label="Remember Me!"/>*@
                            <MudButton ButtonType="ButtonType.Submit" Align="align.Center"><div class="btncolor">Sign Up</div></MudButton>
                        </div>
                    </MudForm>
                </MudPaper>
            </MudItem>
        </div>
    </MudGrid>
</div>

@code {
    bool success;
    MudTextField<string> pwField1;
    MudTextField<string> pwusername;
    MudForm form;
    User user = new User();

    public void postData()
    {

        userService.SaveUser(user);
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private IEnumerable<string> UsernameCheck(string uname)
    {
        if (uname.Length < 8)
            yield return "Username must be at least of length 8";
        if (!Regex.IsMatch(uname, @"[A-Z]"))
            yield return "Username must contain at least one uppercase letter";
        if (!Regex.IsMatch(uname, @"[0-9]"))
            yield return "Username must contain at least one digit";
    }
    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

}
